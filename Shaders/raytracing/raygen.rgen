#version 460
#extension GL_EXT_ray_tracing : enable

layout(location = 0) rayPayloadEXT vec3 hitValue;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba8) uniform image2D image;
layout(set = 0, binding = 2) uniform CameraProperties {
    mat4 viewInverse;
    mat4 projInverse;
}cam;

//レイを発射する
void main() {

    //gl_LaunchIDEXTはピクセル位置、vec2(0.5)を足すことでピクセルの中心位置を求めている
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    //[0,0]～[1,1]の座標に変換
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    //[-1,-1]～[1,1]の座標に変換
    vec2 d = inUV * 2.0 - 1.0;
    
    //ワールド空間でのカメラ位置（ビュー空間でのvec(0,0,0,1)から変換している）
    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    //全てのピクセルに対してレイを飛ばす
    //クリッピング座標に対して、プロジェクション逆行列、ビュー逆行列をかけてワールド空間での座標を求める
    //カメラからレイを飛ばしたいのでz=1をする
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    //どこまでレイを追うか
    float tmin = 0.001;
    float tmax = 10000.0;
    //初期値0にする
    hitValue = vec3(0.0);
    //0xff：全てのオブジェクトの衝突判定を行う
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));
}