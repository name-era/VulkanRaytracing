#version 460
#extension GL_EXT_ray_tracing : enable

struct RayPayload {
    vec3 color;
    float distance;
    vec3 normal;
    float reflector;
};
layout(location = 0) rayPayloadEXT RayPayload rayPayload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba8) uniform image2D image;
layout(set = 0, binding = 2) uniform UBO {
    mat4 viewInverse;
    mat4 projInverse;
    vec4 lightPos;
}ubo;

layout(constant_id = 0) const int MAX_RECURSION = 0;

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = ubo.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = ubo.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz / target.w), 0);

    float tmin = 0.001;
    float tmax = 10000.0;
    vec3 color = vec3(0.0);

    for(int i = 0; i < MAX_RECURSION; i ++) {
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        vec3 hitColor = rayPayload.color;

        //当たらなかった場合
        if(rayPayload.distance < 0.0f) {
            color += hitColor;
            break;
        }
        //当たった＆反射だった場合
        else if(rayPayload.reflector == 1.0f) {
            const vec4 hitPos = origin + direction * rayPayload.distance;
            //レイの衝突点でめり込まないようにする
            origin.xyz = hitPos.xyz + rayPayload.normal * 0.0001f;
            direction.xyz = reflect(direction.xyz, rayPayload.normal);
        }
        else {
            color += hitColor;
            break;
        }
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}